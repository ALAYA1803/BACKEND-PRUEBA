<?xml version="1.0"?>
<doc>
    <assembly>
        <name>workstation-back-end</name>
    </assembly>
    <members>
        <member name="T:workstation_back_end.Experience.Interfaces.REST.ExperienceController">
            <summary>
            API Controller for managing tourism experiences.
            Supports listing, creating, updating, deleting and filtering experiences.
            </summary>
        </member>
        <member name="M:workstation_back_end.Experience.Interfaces.REST.ExperienceController.GetAll">
            <summary>
            Gets all active experiences in the system.
            </summary>
            <response code="200">Returns the list of experiences</response>
            <response code="404">If no experiences are found</response>
        </member>
        <member name="M:workstation_back_end.Experience.Interfaces.REST.ExperienceController.Create(workstation_back_end.Experience.Domain.Models.Commands.CreateExperienceCommand)">
             <summary>
             Creates a new tourism experience.
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/v1/Experience
                 {
                    "title": "City Bike Tour",
                    "description": "A guided bike tour through downtown.",
                    "location": "Lima",
                    "duration": 2,
                    "price": 35.00,
                    "frequencies": "Monday, Wednesday, Friday",
                    "rating": 4.5,
                    "categoryId": 1,
                    "experienceImages": [{ "url": "https://example.com/img.jpg" }],
                    "includes": [{ "description": "Bike rental" }],
                    "schedules": [{ "time": "09:00" }]
                 }
             </remarks>
             <response code="201">Returns the newly created experience</response>
             <response code="400">Validation error or bad request</response>
             <response code="500">Internal server error</response>
        </member>
        <member name="M:workstation_back_end.Experience.Interfaces.REST.ExperienceController.Update(System.Int32,workstation_back_end.Experience.Domain.Models.Commands.UpdateExperienceCommand)">
            <summary>
            Updates an existing tourism experience.
            </summary>
            <param name="id">Experience ID</param>
            <param name="command">Update command with new data</param>
            <response code="200">Experience updated successfully</response>
            <response code="400">Mismatched IDs or invalid request</response>
            <response code="404">Experience not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:workstation_back_end.Experience.Interfaces.REST.ExperienceController.Delete(System.Int32)">
            <summary>
            Deletes an experience by its ID.
            </summary>
            <param name="id">Experience ID</param>
            <response code="204">Experience deleted successfully</response>
            <response code="404">Experience not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:workstation_back_end.Experience.Interfaces.REST.ExperienceController.GetByCategory(System.Int32)">
            <summary>
            Gets all experiences that belong to a specific category.
            </summary>
            <param name="categoryId">The ID of the category</param>
            <response code="200">Returns the filtered experiences</response>
            <response code="404">No experiences found for the category</response>
        </member>
        <member name="M:workstation_back_end.Shared.Infraestructure.Persistence.Repositories.BaseRepository`1.AddAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:workstation_back_end.Shared.Infraestructure.Persistence.Repositories.BaseRepository`1.FindByIdAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:workstation_back_end.Shared.Infraestructure.Persistence.Repositories.BaseRepository`1.Update(`0)">
            <inheritdoc />
        </member>
        <member name="M:workstation_back_end.Shared.Infraestructure.Persistence.Repositories.BaseRepository`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:workstation_back_end.Shared.Infraestructure.Persistence.Repositories.BaseRepository`1.ListAsync">
            <inheritdoc />
        </member>
        <member name="M:workstation_back_end.Shared.Infraestructure.Persistence.Repositories.UnitOfWork.CompleteAsync">
            <inheritdoc />
        </member>
    </members>
</doc>
